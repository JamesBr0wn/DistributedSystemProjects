// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: NameServer.proto
#ifndef GRPC_NameServer_2eproto__INCLUDED
#define GRPC_NameServer_2eproto__INCLUDED

#include "NameServer.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace NameServer {

class NameService final {
 public:
  static constexpr char const* service_full_name() {
    return "NameServer.NameService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status startServer(::grpc::ClientContext* context, const ::NameServer::ServerInfo& request, ::NameServer::ServerInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NameServer::ServerInfo>> AsyncstartServer(::grpc::ClientContext* context, const ::NameServer::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NameServer::ServerInfo>>(AsyncstartServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NameServer::ServerInfo>> PrepareAsyncstartServer(::grpc::ClientContext* context, const ::NameServer::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NameServer::ServerInfo>>(PrepareAsyncstartServerRaw(context, request, cq));
    }
    virtual ::grpc::Status terminateServer(::grpc::ClientContext* context, const ::NameServer::ServerInfo& request, ::NameServer::ServerInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NameServer::ServerInfo>> AsyncterminateServer(::grpc::ClientContext* context, const ::NameServer::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NameServer::ServerInfo>>(AsyncterminateServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NameServer::ServerInfo>> PrepareAsyncterminateServer(::grpc::ClientContext* context, const ::NameServer::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NameServer::ServerInfo>>(PrepareAsyncterminateServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::NameServer::BlockStore>> beginGetTransaction(::grpc::ClientContext* context, const ::NameServer::FileInfo& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::NameServer::BlockStore>>(beginGetTransactionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::NameServer::BlockStore>> AsyncbeginGetTransaction(::grpc::ClientContext* context, const ::NameServer::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::NameServer::BlockStore>>(AsyncbeginGetTransactionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::NameServer::BlockStore>> PrepareAsyncbeginGetTransaction(::grpc::ClientContext* context, const ::NameServer::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::NameServer::BlockStore>>(PrepareAsyncbeginGetTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status commitGetTransaction(::grpc::ClientContext* context, const ::NameServer::FileInfo& request, ::NameServer::FileInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NameServer::FileInfo>> AsynccommitGetTransaction(::grpc::ClientContext* context, const ::NameServer::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NameServer::FileInfo>>(AsynccommitGetTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NameServer::FileInfo>> PrepareAsynccommitGetTransaction(::grpc::ClientContext* context, const ::NameServer::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NameServer::FileInfo>>(PrepareAsynccommitGetTransactionRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void startServer(::grpc::ClientContext* context, const ::NameServer::ServerInfo* request, ::NameServer::ServerInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void terminateServer(::grpc::ClientContext* context, const ::NameServer::ServerInfo* request, ::NameServer::ServerInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void commitGetTransaction(::grpc::ClientContext* context, const ::NameServer::FileInfo* request, ::NameServer::FileInfo* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NameServer::ServerInfo>* AsyncstartServerRaw(::grpc::ClientContext* context, const ::NameServer::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NameServer::ServerInfo>* PrepareAsyncstartServerRaw(::grpc::ClientContext* context, const ::NameServer::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NameServer::ServerInfo>* AsyncterminateServerRaw(::grpc::ClientContext* context, const ::NameServer::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NameServer::ServerInfo>* PrepareAsyncterminateServerRaw(::grpc::ClientContext* context, const ::NameServer::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::NameServer::BlockStore>* beginGetTransactionRaw(::grpc::ClientContext* context, const ::NameServer::FileInfo& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::NameServer::BlockStore>* AsyncbeginGetTransactionRaw(::grpc::ClientContext* context, const ::NameServer::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::NameServer::BlockStore>* PrepareAsyncbeginGetTransactionRaw(::grpc::ClientContext* context, const ::NameServer::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NameServer::FileInfo>* AsynccommitGetTransactionRaw(::grpc::ClientContext* context, const ::NameServer::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NameServer::FileInfo>* PrepareAsynccommitGetTransactionRaw(::grpc::ClientContext* context, const ::NameServer::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status startServer(::grpc::ClientContext* context, const ::NameServer::ServerInfo& request, ::NameServer::ServerInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NameServer::ServerInfo>> AsyncstartServer(::grpc::ClientContext* context, const ::NameServer::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NameServer::ServerInfo>>(AsyncstartServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NameServer::ServerInfo>> PrepareAsyncstartServer(::grpc::ClientContext* context, const ::NameServer::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NameServer::ServerInfo>>(PrepareAsyncstartServerRaw(context, request, cq));
    }
    ::grpc::Status terminateServer(::grpc::ClientContext* context, const ::NameServer::ServerInfo& request, ::NameServer::ServerInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NameServer::ServerInfo>> AsyncterminateServer(::grpc::ClientContext* context, const ::NameServer::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NameServer::ServerInfo>>(AsyncterminateServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NameServer::ServerInfo>> PrepareAsyncterminateServer(::grpc::ClientContext* context, const ::NameServer::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NameServer::ServerInfo>>(PrepareAsyncterminateServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::NameServer::BlockStore>> beginGetTransaction(::grpc::ClientContext* context, const ::NameServer::FileInfo& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::NameServer::BlockStore>>(beginGetTransactionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::NameServer::BlockStore>> AsyncbeginGetTransaction(::grpc::ClientContext* context, const ::NameServer::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::NameServer::BlockStore>>(AsyncbeginGetTransactionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::NameServer::BlockStore>> PrepareAsyncbeginGetTransaction(::grpc::ClientContext* context, const ::NameServer::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::NameServer::BlockStore>>(PrepareAsyncbeginGetTransactionRaw(context, request, cq));
    }
    ::grpc::Status commitGetTransaction(::grpc::ClientContext* context, const ::NameServer::FileInfo& request, ::NameServer::FileInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NameServer::FileInfo>> AsynccommitGetTransaction(::grpc::ClientContext* context, const ::NameServer::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NameServer::FileInfo>>(AsynccommitGetTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NameServer::FileInfo>> PrepareAsynccommitGetTransaction(::grpc::ClientContext* context, const ::NameServer::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NameServer::FileInfo>>(PrepareAsynccommitGetTransactionRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void startServer(::grpc::ClientContext* context, const ::NameServer::ServerInfo* request, ::NameServer::ServerInfo* response, std::function<void(::grpc::Status)>) override;
      void terminateServer(::grpc::ClientContext* context, const ::NameServer::ServerInfo* request, ::NameServer::ServerInfo* response, std::function<void(::grpc::Status)>) override;
      void commitGetTransaction(::grpc::ClientContext* context, const ::NameServer::FileInfo* request, ::NameServer::FileInfo* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::NameServer::ServerInfo>* AsyncstartServerRaw(::grpc::ClientContext* context, const ::NameServer::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NameServer::ServerInfo>* PrepareAsyncstartServerRaw(::grpc::ClientContext* context, const ::NameServer::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NameServer::ServerInfo>* AsyncterminateServerRaw(::grpc::ClientContext* context, const ::NameServer::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NameServer::ServerInfo>* PrepareAsyncterminateServerRaw(::grpc::ClientContext* context, const ::NameServer::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::NameServer::BlockStore>* beginGetTransactionRaw(::grpc::ClientContext* context, const ::NameServer::FileInfo& request) override;
    ::grpc::ClientAsyncReader< ::NameServer::BlockStore>* AsyncbeginGetTransactionRaw(::grpc::ClientContext* context, const ::NameServer::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::NameServer::BlockStore>* PrepareAsyncbeginGetTransactionRaw(::grpc::ClientContext* context, const ::NameServer::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NameServer::FileInfo>* AsynccommitGetTransactionRaw(::grpc::ClientContext* context, const ::NameServer::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NameServer::FileInfo>* PrepareAsynccommitGetTransactionRaw(::grpc::ClientContext* context, const ::NameServer::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_startServer_;
    const ::grpc::internal::RpcMethod rpcmethod_terminateServer_;
    const ::grpc::internal::RpcMethod rpcmethod_beginGetTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_commitGetTransaction_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status startServer(::grpc::ServerContext* context, const ::NameServer::ServerInfo* request, ::NameServer::ServerInfo* response);
    virtual ::grpc::Status terminateServer(::grpc::ServerContext* context, const ::NameServer::ServerInfo* request, ::NameServer::ServerInfo* response);
    virtual ::grpc::Status beginGetTransaction(::grpc::ServerContext* context, const ::NameServer::FileInfo* request, ::grpc::ServerWriter< ::NameServer::BlockStore>* writer);
    virtual ::grpc::Status commitGetTransaction(::grpc::ServerContext* context, const ::NameServer::FileInfo* request, ::NameServer::FileInfo* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_startServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_startServer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_startServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startServer(::grpc::ServerContext* context, const ::NameServer::ServerInfo* request, ::NameServer::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststartServer(::grpc::ServerContext* context, ::NameServer::ServerInfo* request, ::grpc::ServerAsyncResponseWriter< ::NameServer::ServerInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_terminateServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_terminateServer() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_terminateServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status terminateServer(::grpc::ServerContext* context, const ::NameServer::ServerInfo* request, ::NameServer::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestterminateServer(::grpc::ServerContext* context, ::NameServer::ServerInfo* request, ::grpc::ServerAsyncResponseWriter< ::NameServer::ServerInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_beginGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_beginGetTransaction() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_beginGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginGetTransaction(::grpc::ServerContext* context, const ::NameServer::FileInfo* request, ::grpc::ServerWriter< ::NameServer::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbeginGetTransaction(::grpc::ServerContext* context, ::NameServer::FileInfo* request, ::grpc::ServerAsyncWriter< ::NameServer::BlockStore>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_commitGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_commitGetTransaction() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_commitGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commitGetTransaction(::grpc::ServerContext* context, const ::NameServer::FileInfo* request, ::NameServer::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcommitGetTransaction(::grpc::ServerContext* context, ::NameServer::FileInfo* request, ::grpc::ServerAsyncResponseWriter< ::NameServer::FileInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_startServer<WithAsyncMethod_terminateServer<WithAsyncMethod_beginGetTransaction<WithAsyncMethod_commitGetTransaction<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_startServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_startServer() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_startServer<BaseClass>, ::NameServer::ServerInfo, ::NameServer::ServerInfo>(
          [this](::grpc::ServerContext* context,
                 const ::NameServer::ServerInfo* request,
                 ::NameServer::ServerInfo* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->startServer(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_startServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startServer(::grpc::ServerContext* context, const ::NameServer::ServerInfo* request, ::NameServer::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void startServer(::grpc::ServerContext* context, const ::NameServer::ServerInfo* request, ::NameServer::ServerInfo* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_terminateServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_terminateServer() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_terminateServer<BaseClass>, ::NameServer::ServerInfo, ::NameServer::ServerInfo>(
          [this](::grpc::ServerContext* context,
                 const ::NameServer::ServerInfo* request,
                 ::NameServer::ServerInfo* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->terminateServer(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_terminateServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status terminateServer(::grpc::ServerContext* context, const ::NameServer::ServerInfo* request, ::NameServer::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void terminateServer(::grpc::ServerContext* context, const ::NameServer::ServerInfo* request, ::NameServer::ServerInfo* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_beginGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_beginGetTransaction() {
    }
    ~ExperimentalWithCallbackMethod_beginGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginGetTransaction(::grpc::ServerContext* context, const ::NameServer::FileInfo* request, ::grpc::ServerWriter< ::NameServer::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_commitGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_commitGetTransaction() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_commitGetTransaction<BaseClass>, ::NameServer::FileInfo, ::NameServer::FileInfo>(
          [this](::grpc::ServerContext* context,
                 const ::NameServer::FileInfo* request,
                 ::NameServer::FileInfo* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->commitGetTransaction(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_commitGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commitGetTransaction(::grpc::ServerContext* context, const ::NameServer::FileInfo* request, ::NameServer::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void commitGetTransaction(::grpc::ServerContext* context, const ::NameServer::FileInfo* request, ::NameServer::FileInfo* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_startServer<ExperimentalWithCallbackMethod_terminateServer<ExperimentalWithCallbackMethod_beginGetTransaction<ExperimentalWithCallbackMethod_commitGetTransaction<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_startServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_startServer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_startServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startServer(::grpc::ServerContext* context, const ::NameServer::ServerInfo* request, ::NameServer::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_terminateServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_terminateServer() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_terminateServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status terminateServer(::grpc::ServerContext* context, const ::NameServer::ServerInfo* request, ::NameServer::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_beginGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_beginGetTransaction() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_beginGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginGetTransaction(::grpc::ServerContext* context, const ::NameServer::FileInfo* request, ::grpc::ServerWriter< ::NameServer::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_commitGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_commitGetTransaction() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_commitGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commitGetTransaction(::grpc::ServerContext* context, const ::NameServer::FileInfo* request, ::NameServer::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_startServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_startServer() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_startServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startServer(::grpc::ServerContext* context, const ::NameServer::ServerInfo* request, ::NameServer::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststartServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_terminateServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_terminateServer() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_terminateServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status terminateServer(::grpc::ServerContext* context, const ::NameServer::ServerInfo* request, ::NameServer::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestterminateServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_beginGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_beginGetTransaction() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_beginGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginGetTransaction(::grpc::ServerContext* context, const ::NameServer::FileInfo* request, ::grpc::ServerWriter< ::NameServer::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbeginGetTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_commitGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_commitGetTransaction() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_commitGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commitGetTransaction(::grpc::ServerContext* context, const ::NameServer::FileInfo* request, ::NameServer::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcommitGetTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_startServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_startServer() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_startServer<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->startServer(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_startServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startServer(::grpc::ServerContext* context, const ::NameServer::ServerInfo* request, ::NameServer::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void startServer(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_terminateServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_terminateServer() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_terminateServer<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->terminateServer(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_terminateServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status terminateServer(::grpc::ServerContext* context, const ::NameServer::ServerInfo* request, ::NameServer::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void terminateServer(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_beginGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_beginGetTransaction() {
    }
    ~ExperimentalWithRawCallbackMethod_beginGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginGetTransaction(::grpc::ServerContext* context, const ::NameServer::FileInfo* request, ::grpc::ServerWriter< ::NameServer::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_commitGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_commitGetTransaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_commitGetTransaction<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->commitGetTransaction(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_commitGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commitGetTransaction(::grpc::ServerContext* context, const ::NameServer::FileInfo* request, ::NameServer::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void commitGetTransaction(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_startServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_startServer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::NameServer::ServerInfo, ::NameServer::ServerInfo>(std::bind(&WithStreamedUnaryMethod_startServer<BaseClass>::StreamedstartServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_startServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status startServer(::grpc::ServerContext* context, const ::NameServer::ServerInfo* request, ::NameServer::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedstartServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NameServer::ServerInfo,::NameServer::ServerInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_terminateServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_terminateServer() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::NameServer::ServerInfo, ::NameServer::ServerInfo>(std::bind(&WithStreamedUnaryMethod_terminateServer<BaseClass>::StreamedterminateServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_terminateServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status terminateServer(::grpc::ServerContext* context, const ::NameServer::ServerInfo* request, ::NameServer::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedterminateServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NameServer::ServerInfo,::NameServer::ServerInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_commitGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_commitGetTransaction() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::NameServer::FileInfo, ::NameServer::FileInfo>(std::bind(&WithStreamedUnaryMethod_commitGetTransaction<BaseClass>::StreamedcommitGetTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_commitGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status commitGetTransaction(::grpc::ServerContext* context, const ::NameServer::FileInfo* request, ::NameServer::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcommitGetTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NameServer::FileInfo,::NameServer::FileInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_startServer<WithStreamedUnaryMethod_terminateServer<WithStreamedUnaryMethod_commitGetTransaction<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_beginGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_beginGetTransaction() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::NameServer::FileInfo, ::NameServer::BlockStore>(std::bind(&WithSplitStreamingMethod_beginGetTransaction<BaseClass>::StreamedbeginGetTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_beginGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status beginGetTransaction(::grpc::ServerContext* context, const ::NameServer::FileInfo* request, ::grpc::ServerWriter< ::NameServer::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedbeginGetTransaction(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::NameServer::FileInfo,::NameServer::BlockStore>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_beginGetTransaction<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_startServer<WithStreamedUnaryMethod_terminateServer<WithSplitStreamingMethod_beginGetTransaction<WithStreamedUnaryMethod_commitGetTransaction<Service > > > > StreamedService;
};

}  // namespace NameServer


#endif  // GRPC_NameServer_2eproto__INCLUDED
