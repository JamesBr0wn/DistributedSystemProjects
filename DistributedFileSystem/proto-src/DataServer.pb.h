// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataServer.proto

#ifndef PROTOBUF_INCLUDED_DataServer_2eproto
#define PROTOBUF_INCLUDED_DataServer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_DataServer_2eproto 

namespace protobuf_DataServer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_DataServer_2eproto
namespace DataServer {
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace DataServer
namespace google {
namespace protobuf {
template<> ::DataServer::Block* Arena::CreateMaybeMessage<::DataServer::Block>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace DataServer {

// ===================================================================

class Block : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DataServer.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Block* other);
  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(NULL);
  }

  Block* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fileName = 1;
  void clear_filename();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // bytes blockData = 4;
  void clear_blockdata();
  static const int kBlockDataFieldNumber = 4;
  const ::std::string& blockdata() const;
  void set_blockdata(const ::std::string& value);
  #if LANG_CXX11
  void set_blockdata(::std::string&& value);
  #endif
  void set_blockdata(const char* value);
  void set_blockdata(const void* value, size_t size);
  ::std::string* mutable_blockdata();
  ::std::string* release_blockdata();
  void set_allocated_blockdata(::std::string* blockdata);

  // bytes blockHash = 5;
  void clear_blockhash();
  static const int kBlockHashFieldNumber = 5;
  const ::std::string& blockhash() const;
  void set_blockhash(const ::std::string& value);
  #if LANG_CXX11
  void set_blockhash(::std::string&& value);
  #endif
  void set_blockhash(const char* value);
  void set_blockhash(const void* value, size_t size);
  ::std::string* mutable_blockhash();
  ::std::string* release_blockhash();
  void set_allocated_blockhash(::std::string* blockhash);

  // uint64 blockSize = 3;
  void clear_blocksize();
  static const int kBlockSizeFieldNumber = 3;
  ::google::protobuf::uint64 blocksize() const;
  void set_blocksize(::google::protobuf::uint64 value);

  // uint32 blockNum = 2;
  void clear_blocknum();
  static const int kBlockNumFieldNumber = 2;
  ::google::protobuf::uint32 blocknum() const;
  void set_blocknum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DataServer.Block)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr blockdata_;
  ::google::protobuf::internal::ArenaStringPtr blockhash_;
  ::google::protobuf::uint64 blocksize_;
  ::google::protobuf::uint32 blocknum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DataServer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block

// string fileName = 1;
inline void Block::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Block::filename() const {
  // @@protoc_insertion_point(field_get:DataServer.Block.fileName)
  return filename_.GetNoArena();
}
inline void Block::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataServer.Block.fileName)
}
#if LANG_CXX11
inline void Block::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataServer.Block.fileName)
}
#endif
inline void Block::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataServer.Block.fileName)
}
inline void Block::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataServer.Block.fileName)
}
inline ::std::string* Block::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:DataServer.Block.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_filename() {
  // @@protoc_insertion_point(field_release:DataServer.Block.fileName)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:DataServer.Block.fileName)
}

// uint32 blockNum = 2;
inline void Block::clear_blocknum() {
  blocknum_ = 0u;
}
inline ::google::protobuf::uint32 Block::blocknum() const {
  // @@protoc_insertion_point(field_get:DataServer.Block.blockNum)
  return blocknum_;
}
inline void Block::set_blocknum(::google::protobuf::uint32 value) {
  
  blocknum_ = value;
  // @@protoc_insertion_point(field_set:DataServer.Block.blockNum)
}

// uint64 blockSize = 3;
inline void Block::clear_blocksize() {
  blocksize_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Block::blocksize() const {
  // @@protoc_insertion_point(field_get:DataServer.Block.blockSize)
  return blocksize_;
}
inline void Block::set_blocksize(::google::protobuf::uint64 value) {
  
  blocksize_ = value;
  // @@protoc_insertion_point(field_set:DataServer.Block.blockSize)
}

// bytes blockData = 4;
inline void Block::clear_blockdata() {
  blockdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Block::blockdata() const {
  // @@protoc_insertion_point(field_get:DataServer.Block.blockData)
  return blockdata_.GetNoArena();
}
inline void Block::set_blockdata(const ::std::string& value) {
  
  blockdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataServer.Block.blockData)
}
#if LANG_CXX11
inline void Block::set_blockdata(::std::string&& value) {
  
  blockdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataServer.Block.blockData)
}
#endif
inline void Block::set_blockdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  blockdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataServer.Block.blockData)
}
inline void Block::set_blockdata(const void* value, size_t size) {
  
  blockdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataServer.Block.blockData)
}
inline ::std::string* Block::mutable_blockdata() {
  
  // @@protoc_insertion_point(field_mutable:DataServer.Block.blockData)
  return blockdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_blockdata() {
  // @@protoc_insertion_point(field_release:DataServer.Block.blockData)
  
  return blockdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_blockdata(::std::string* blockdata) {
  if (blockdata != NULL) {
    
  } else {
    
  }
  blockdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockdata);
  // @@protoc_insertion_point(field_set_allocated:DataServer.Block.blockData)
}

// bytes blockHash = 5;
inline void Block::clear_blockhash() {
  blockhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Block::blockhash() const {
  // @@protoc_insertion_point(field_get:DataServer.Block.blockHash)
  return blockhash_.GetNoArena();
}
inline void Block::set_blockhash(const ::std::string& value) {
  
  blockhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataServer.Block.blockHash)
}
#if LANG_CXX11
inline void Block::set_blockhash(::std::string&& value) {
  
  blockhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataServer.Block.blockHash)
}
#endif
inline void Block::set_blockhash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  blockhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataServer.Block.blockHash)
}
inline void Block::set_blockhash(const void* value, size_t size) {
  
  blockhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataServer.Block.blockHash)
}
inline ::std::string* Block::mutable_blockhash() {
  
  // @@protoc_insertion_point(field_mutable:DataServer.Block.blockHash)
  return blockhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_blockhash() {
  // @@protoc_insertion_point(field_release:DataServer.Block.blockHash)
  
  return blockhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_blockhash(::std::string* blockhash) {
  if (blockhash != NULL) {
    
  } else {
    
  }
  blockhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockhash);
  // @@protoc_insertion_point(field_set_allocated:DataServer.Block.blockHash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace DataServer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_DataServer_2eproto
