// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DataServer.proto

#include "DataServer.pb.h"
#include "DataServer.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace DataServer {

static const char* DataService_method_names[] = {
  "/DataServer.DataService/ReadBlock",
  "/DataServer.DataService/WriteBlock",
};

std::unique_ptr< DataService::Stub> DataService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataService::Stub> stub(new DataService::Stub(channel));
  return stub;
}

DataService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ReadBlock_(DataService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteBlock_(DataService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DataService::Stub::ReadBlock(::grpc::ClientContext* context, const ::DataServer::Block& request, ::DataServer::Block* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReadBlock_, context, request, response);
}

void DataService::Stub::experimental_async::ReadBlock(::grpc::ClientContext* context, const ::DataServer::Block* request, ::DataServer::Block* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReadBlock_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::DataServer::Block>* DataService::Stub::AsyncReadBlockRaw(::grpc::ClientContext* context, const ::DataServer::Block& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::DataServer::Block>::Create(channel_.get(), cq, rpcmethod_ReadBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::DataServer::Block>* DataService::Stub::PrepareAsyncReadBlockRaw(::grpc::ClientContext* context, const ::DataServer::Block& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::DataServer::Block>::Create(channel_.get(), cq, rpcmethod_ReadBlock_, context, request, false);
}

::grpc::Status DataService::Stub::WriteBlock(::grpc::ClientContext* context, const ::DataServer::Block& request, ::DataServer::Block* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WriteBlock_, context, request, response);
}

void DataService::Stub::experimental_async::WriteBlock(::grpc::ClientContext* context, const ::DataServer::Block* request, ::DataServer::Block* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WriteBlock_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::DataServer::Block>* DataService::Stub::AsyncWriteBlockRaw(::grpc::ClientContext* context, const ::DataServer::Block& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::DataServer::Block>::Create(channel_.get(), cq, rpcmethod_WriteBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::DataServer::Block>* DataService::Stub::PrepareAsyncWriteBlockRaw(::grpc::ClientContext* context, const ::DataServer::Block& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::DataServer::Block>::Create(channel_.get(), cq, rpcmethod_WriteBlock_, context, request, false);
}

DataService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataService::Service, ::DataServer::Block, ::DataServer::Block>(
          std::mem_fn(&DataService::Service::ReadBlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataService::Service, ::DataServer::Block, ::DataServer::Block>(
          std::mem_fn(&DataService::Service::WriteBlock), this)));
}

DataService::Service::~Service() {
}

::grpc::Status DataService::Service::ReadBlock(::grpc::ServerContext* context, const ::DataServer::Block* request, ::DataServer::Block* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataService::Service::WriteBlock(::grpc::ServerContext* context, const ::DataServer::Block* request, ::DataServer::Block* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace DataServer

