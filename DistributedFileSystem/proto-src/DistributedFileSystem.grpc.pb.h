// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DistributedFileSystem.proto
#ifndef GRPC_DistributedFileSystem_2eproto__INCLUDED
#define GRPC_DistributedFileSystem_2eproto__INCLUDED

#include "DistributedFileSystem.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace DistributedFileSystem {

class NameService final {
 public:
  static constexpr char const* service_full_name() {
    return "DistributedFileSystem.NameService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status startServer(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo& request, ::DistributedFileSystem::ServerInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::ServerInfo>> AsyncstartServer(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::ServerInfo>>(AsyncstartServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::ServerInfo>> PrepareAsyncstartServer(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::ServerInfo>>(PrepareAsyncstartServerRaw(context, request, cq));
    }
    virtual ::grpc::Status terminateServer(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo& request, ::DistributedFileSystem::ServerInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::ServerInfo>> AsyncterminateServer(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::ServerInfo>>(AsyncterminateServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::ServerInfo>> PrepareAsyncterminateServer(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::ServerInfo>>(PrepareAsyncterminateServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::DistributedFileSystem::BlockStore>> beginGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::DistributedFileSystem::BlockStore>>(beginGetTransactionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockStore>> AsyncbeginGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockStore>>(AsyncbeginGetTransactionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockStore>> PrepareAsyncbeginGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockStore>>(PrepareAsyncbeginGetTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status commitGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::DistributedFileSystem::FileInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>> AsynccommitGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>>(AsynccommitGetTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>> PrepareAsynccommitGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>>(PrepareAsynccommitGetTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status abortGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::DistributedFileSystem::FileInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>> AsyncabortGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>>(AsyncabortGetTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>> PrepareAsyncabortGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>>(PrepareAsyncabortGetTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::DistributedFileSystem::BlockStore>> beginPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::DistributedFileSystem::BlockStore>>(beginPutTransactionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockStore>> AsyncbeginPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockStore>>(AsyncbeginPutTransactionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockStore>> PrepareAsyncbeginPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockStore>>(PrepareAsyncbeginPutTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status commitPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::DistributedFileSystem::FileInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>> AsynccommitPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>>(AsynccommitPutTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>> PrepareAsynccommitPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>>(PrepareAsynccommitPutTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status abortPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::DistributedFileSystem::FileInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>> AsyncabortPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>>(AsyncabortPutTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>> PrepareAsyncabortPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>>(PrepareAsyncabortPutTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::DistributedFileSystem::BlockStore>> beginRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::DistributedFileSystem::BlockStore>>(beginRmTransactionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockStore>> AsyncbeginRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockStore>>(AsyncbeginRmTransactionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockStore>> PrepareAsyncbeginRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockStore>>(PrepareAsyncbeginRmTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status commitRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::DistributedFileSystem::FileInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>> AsynccommitRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>>(AsynccommitRmTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>> PrepareAsynccommitRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>>(PrepareAsynccommitRmTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status abortRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::DistributedFileSystem::FileInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>> AsyncabortRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>>(AsyncabortRmTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>> PrepareAsyncabortRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>>(PrepareAsyncabortRmTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status updateBlockInfo(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::DistributedFileSystem::BlockInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::BlockInfo>> AsyncupdateBlockInfo(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::BlockInfo>>(AsyncupdateBlockInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::BlockInfo>> PrepareAsyncupdateBlockInfo(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::BlockInfo>>(PrepareAsyncupdateBlockInfoRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void startServer(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo* request, ::DistributedFileSystem::ServerInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void terminateServer(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo* request, ::DistributedFileSystem::ServerInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void commitGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void abortGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void commitPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void abortPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void commitRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void abortRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void updateBlockInfo(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo* request, ::DistributedFileSystem::BlockInfo* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::ServerInfo>* AsyncstartServerRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::ServerInfo>* PrepareAsyncstartServerRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::ServerInfo>* AsyncterminateServerRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::ServerInfo>* PrepareAsyncterminateServerRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::DistributedFileSystem::BlockStore>* beginGetTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockStore>* AsyncbeginGetTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockStore>* PrepareAsyncbeginGetTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>* AsynccommitGetTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>* PrepareAsynccommitGetTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>* AsyncabortGetTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>* PrepareAsyncabortGetTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::DistributedFileSystem::BlockStore>* beginPutTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockStore>* AsyncbeginPutTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockStore>* PrepareAsyncbeginPutTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>* AsynccommitPutTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>* PrepareAsynccommitPutTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>* AsyncabortPutTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>* PrepareAsyncabortPutTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::DistributedFileSystem::BlockStore>* beginRmTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockStore>* AsyncbeginRmTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockStore>* PrepareAsyncbeginRmTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>* AsynccommitRmTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>* PrepareAsynccommitRmTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>* AsyncabortRmTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::FileInfo>* PrepareAsyncabortRmTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::BlockInfo>* AsyncupdateBlockInfoRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::BlockInfo>* PrepareAsyncupdateBlockInfoRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status startServer(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo& request, ::DistributedFileSystem::ServerInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::ServerInfo>> AsyncstartServer(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::ServerInfo>>(AsyncstartServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::ServerInfo>> PrepareAsyncstartServer(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::ServerInfo>>(PrepareAsyncstartServerRaw(context, request, cq));
    }
    ::grpc::Status terminateServer(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo& request, ::DistributedFileSystem::ServerInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::ServerInfo>> AsyncterminateServer(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::ServerInfo>>(AsyncterminateServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::ServerInfo>> PrepareAsyncterminateServer(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::ServerInfo>>(PrepareAsyncterminateServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::DistributedFileSystem::BlockStore>> beginGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::DistributedFileSystem::BlockStore>>(beginGetTransactionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockStore>> AsyncbeginGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockStore>>(AsyncbeginGetTransactionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockStore>> PrepareAsyncbeginGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockStore>>(PrepareAsyncbeginGetTransactionRaw(context, request, cq));
    }
    ::grpc::Status commitGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::DistributedFileSystem::FileInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>> AsynccommitGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>>(AsynccommitGetTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>> PrepareAsynccommitGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>>(PrepareAsynccommitGetTransactionRaw(context, request, cq));
    }
    ::grpc::Status abortGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::DistributedFileSystem::FileInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>> AsyncabortGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>>(AsyncabortGetTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>> PrepareAsyncabortGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>>(PrepareAsyncabortGetTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::DistributedFileSystem::BlockStore>> beginPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::DistributedFileSystem::BlockStore>>(beginPutTransactionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockStore>> AsyncbeginPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockStore>>(AsyncbeginPutTransactionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockStore>> PrepareAsyncbeginPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockStore>>(PrepareAsyncbeginPutTransactionRaw(context, request, cq));
    }
    ::grpc::Status commitPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::DistributedFileSystem::FileInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>> AsynccommitPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>>(AsynccommitPutTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>> PrepareAsynccommitPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>>(PrepareAsynccommitPutTransactionRaw(context, request, cq));
    }
    ::grpc::Status abortPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::DistributedFileSystem::FileInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>> AsyncabortPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>>(AsyncabortPutTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>> PrepareAsyncabortPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>>(PrepareAsyncabortPutTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::DistributedFileSystem::BlockStore>> beginRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::DistributedFileSystem::BlockStore>>(beginRmTransactionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockStore>> AsyncbeginRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockStore>>(AsyncbeginRmTransactionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockStore>> PrepareAsyncbeginRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockStore>>(PrepareAsyncbeginRmTransactionRaw(context, request, cq));
    }
    ::grpc::Status commitRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::DistributedFileSystem::FileInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>> AsynccommitRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>>(AsynccommitRmTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>> PrepareAsynccommitRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>>(PrepareAsynccommitRmTransactionRaw(context, request, cq));
    }
    ::grpc::Status abortRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::DistributedFileSystem::FileInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>> AsyncabortRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>>(AsyncabortRmTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>> PrepareAsyncabortRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>>(PrepareAsyncabortRmTransactionRaw(context, request, cq));
    }
    ::grpc::Status updateBlockInfo(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::DistributedFileSystem::BlockInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::BlockInfo>> AsyncupdateBlockInfo(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::BlockInfo>>(AsyncupdateBlockInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::BlockInfo>> PrepareAsyncupdateBlockInfo(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::BlockInfo>>(PrepareAsyncupdateBlockInfoRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void startServer(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo* request, ::DistributedFileSystem::ServerInfo* response, std::function<void(::grpc::Status)>) override;
      void terminateServer(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo* request, ::DistributedFileSystem::ServerInfo* response, std::function<void(::grpc::Status)>) override;
      void commitGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response, std::function<void(::grpc::Status)>) override;
      void abortGetTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response, std::function<void(::grpc::Status)>) override;
      void commitPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response, std::function<void(::grpc::Status)>) override;
      void abortPutTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response, std::function<void(::grpc::Status)>) override;
      void commitRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response, std::function<void(::grpc::Status)>) override;
      void abortRmTransaction(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response, std::function<void(::grpc::Status)>) override;
      void updateBlockInfo(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo* request, ::DistributedFileSystem::BlockInfo* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::ServerInfo>* AsyncstartServerRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::ServerInfo>* PrepareAsyncstartServerRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::ServerInfo>* AsyncterminateServerRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::ServerInfo>* PrepareAsyncterminateServerRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::DistributedFileSystem::BlockStore>* beginGetTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request) override;
    ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockStore>* AsyncbeginGetTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockStore>* PrepareAsyncbeginGetTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>* AsynccommitGetTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>* PrepareAsynccommitGetTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>* AsyncabortGetTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>* PrepareAsyncabortGetTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::DistributedFileSystem::BlockStore>* beginPutTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request) override;
    ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockStore>* AsyncbeginPutTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockStore>* PrepareAsyncbeginPutTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>* AsynccommitPutTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>* PrepareAsynccommitPutTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>* AsyncabortPutTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>* PrepareAsyncabortPutTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::DistributedFileSystem::BlockStore>* beginRmTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request) override;
    ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockStore>* AsyncbeginRmTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockStore>* PrepareAsyncbeginRmTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>* AsynccommitRmTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>* PrepareAsynccommitRmTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>* AsyncabortRmTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::FileInfo>* PrepareAsyncabortRmTransactionRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::BlockInfo>* AsyncupdateBlockInfoRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::BlockInfo>* PrepareAsyncupdateBlockInfoRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_startServer_;
    const ::grpc::internal::RpcMethod rpcmethod_terminateServer_;
    const ::grpc::internal::RpcMethod rpcmethod_beginGetTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_commitGetTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_abortGetTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_beginPutTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_commitPutTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_abortPutTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_beginRmTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_commitRmTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_abortRmTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_updateBlockInfo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status startServer(::grpc::ServerContext* context, const ::DistributedFileSystem::ServerInfo* request, ::DistributedFileSystem::ServerInfo* response);
    virtual ::grpc::Status terminateServer(::grpc::ServerContext* context, const ::DistributedFileSystem::ServerInfo* request, ::DistributedFileSystem::ServerInfo* response);
    virtual ::grpc::Status beginGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer);
    virtual ::grpc::Status commitGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response);
    virtual ::grpc::Status abortGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response);
    virtual ::grpc::Status beginPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer);
    virtual ::grpc::Status commitPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response);
    virtual ::grpc::Status abortPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response);
    virtual ::grpc::Status beginRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer);
    virtual ::grpc::Status commitRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response);
    virtual ::grpc::Status abortRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response);
    virtual ::grpc::Status updateBlockInfo(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::DistributedFileSystem::BlockInfo* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_startServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_startServer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_startServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startServer(::grpc::ServerContext* context, const ::DistributedFileSystem::ServerInfo* request, ::DistributedFileSystem::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststartServer(::grpc::ServerContext* context, ::DistributedFileSystem::ServerInfo* request, ::grpc::ServerAsyncResponseWriter< ::DistributedFileSystem::ServerInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_terminateServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_terminateServer() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_terminateServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status terminateServer(::grpc::ServerContext* context, const ::DistributedFileSystem::ServerInfo* request, ::DistributedFileSystem::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestterminateServer(::grpc::ServerContext* context, ::DistributedFileSystem::ServerInfo* request, ::grpc::ServerAsyncResponseWriter< ::DistributedFileSystem::ServerInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_beginGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_beginGetTransaction() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_beginGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbeginGetTransaction(::grpc::ServerContext* context, ::DistributedFileSystem::FileInfo* request, ::grpc::ServerAsyncWriter< ::DistributedFileSystem::BlockStore>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_commitGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_commitGetTransaction() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_commitGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commitGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcommitGetTransaction(::grpc::ServerContext* context, ::DistributedFileSystem::FileInfo* request, ::grpc::ServerAsyncResponseWriter< ::DistributedFileSystem::FileInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_abortGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_abortGetTransaction() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_abortGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status abortGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestabortGetTransaction(::grpc::ServerContext* context, ::DistributedFileSystem::FileInfo* request, ::grpc::ServerAsyncResponseWriter< ::DistributedFileSystem::FileInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_beginPutTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_beginPutTransaction() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_beginPutTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbeginPutTransaction(::grpc::ServerContext* context, ::DistributedFileSystem::FileInfo* request, ::grpc::ServerAsyncWriter< ::DistributedFileSystem::BlockStore>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_commitPutTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_commitPutTransaction() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_commitPutTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commitPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcommitPutTransaction(::grpc::ServerContext* context, ::DistributedFileSystem::FileInfo* request, ::grpc::ServerAsyncResponseWriter< ::DistributedFileSystem::FileInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_abortPutTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_abortPutTransaction() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_abortPutTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status abortPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestabortPutTransaction(::grpc::ServerContext* context, ::DistributedFileSystem::FileInfo* request, ::grpc::ServerAsyncResponseWriter< ::DistributedFileSystem::FileInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_beginRmTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_beginRmTransaction() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_beginRmTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbeginRmTransaction(::grpc::ServerContext* context, ::DistributedFileSystem::FileInfo* request, ::grpc::ServerAsyncWriter< ::DistributedFileSystem::BlockStore>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_commitRmTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_commitRmTransaction() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_commitRmTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commitRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcommitRmTransaction(::grpc::ServerContext* context, ::DistributedFileSystem::FileInfo* request, ::grpc::ServerAsyncResponseWriter< ::DistributedFileSystem::FileInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_abortRmTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_abortRmTransaction() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_abortRmTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status abortRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestabortRmTransaction(::grpc::ServerContext* context, ::DistributedFileSystem::FileInfo* request, ::grpc::ServerAsyncResponseWriter< ::DistributedFileSystem::FileInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_updateBlockInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_updateBlockInfo() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_updateBlockInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateBlockInfo(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::DistributedFileSystem::BlockInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateBlockInfo(::grpc::ServerContext* context, ::DistributedFileSystem::BlockInfo* request, ::grpc::ServerAsyncResponseWriter< ::DistributedFileSystem::BlockInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_startServer<WithAsyncMethod_terminateServer<WithAsyncMethod_beginGetTransaction<WithAsyncMethod_commitGetTransaction<WithAsyncMethod_abortGetTransaction<WithAsyncMethod_beginPutTransaction<WithAsyncMethod_commitPutTransaction<WithAsyncMethod_abortPutTransaction<WithAsyncMethod_beginRmTransaction<WithAsyncMethod_commitRmTransaction<WithAsyncMethod_abortRmTransaction<WithAsyncMethod_updateBlockInfo<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_startServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_startServer() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_startServer<BaseClass>, ::DistributedFileSystem::ServerInfo, ::DistributedFileSystem::ServerInfo>(
          [this](::grpc::ServerContext* context,
                 const ::DistributedFileSystem::ServerInfo* request,
                 ::DistributedFileSystem::ServerInfo* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->startServer(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_startServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startServer(::grpc::ServerContext* context, const ::DistributedFileSystem::ServerInfo* request, ::DistributedFileSystem::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void startServer(::grpc::ServerContext* context, const ::DistributedFileSystem::ServerInfo* request, ::DistributedFileSystem::ServerInfo* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_terminateServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_terminateServer() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_terminateServer<BaseClass>, ::DistributedFileSystem::ServerInfo, ::DistributedFileSystem::ServerInfo>(
          [this](::grpc::ServerContext* context,
                 const ::DistributedFileSystem::ServerInfo* request,
                 ::DistributedFileSystem::ServerInfo* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->terminateServer(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_terminateServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status terminateServer(::grpc::ServerContext* context, const ::DistributedFileSystem::ServerInfo* request, ::DistributedFileSystem::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void terminateServer(::grpc::ServerContext* context, const ::DistributedFileSystem::ServerInfo* request, ::DistributedFileSystem::ServerInfo* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_beginGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_beginGetTransaction() {
    }
    ~ExperimentalWithCallbackMethod_beginGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_commitGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_commitGetTransaction() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_commitGetTransaction<BaseClass>, ::DistributedFileSystem::FileInfo, ::DistributedFileSystem::FileInfo>(
          [this](::grpc::ServerContext* context,
                 const ::DistributedFileSystem::FileInfo* request,
                 ::DistributedFileSystem::FileInfo* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->commitGetTransaction(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_commitGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commitGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void commitGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_abortGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_abortGetTransaction() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_abortGetTransaction<BaseClass>, ::DistributedFileSystem::FileInfo, ::DistributedFileSystem::FileInfo>(
          [this](::grpc::ServerContext* context,
                 const ::DistributedFileSystem::FileInfo* request,
                 ::DistributedFileSystem::FileInfo* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->abortGetTransaction(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_abortGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status abortGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void abortGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_beginPutTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_beginPutTransaction() {
    }
    ~ExperimentalWithCallbackMethod_beginPutTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_commitPutTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_commitPutTransaction() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_commitPutTransaction<BaseClass>, ::DistributedFileSystem::FileInfo, ::DistributedFileSystem::FileInfo>(
          [this](::grpc::ServerContext* context,
                 const ::DistributedFileSystem::FileInfo* request,
                 ::DistributedFileSystem::FileInfo* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->commitPutTransaction(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_commitPutTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commitPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void commitPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_abortPutTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_abortPutTransaction() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_abortPutTransaction<BaseClass>, ::DistributedFileSystem::FileInfo, ::DistributedFileSystem::FileInfo>(
          [this](::grpc::ServerContext* context,
                 const ::DistributedFileSystem::FileInfo* request,
                 ::DistributedFileSystem::FileInfo* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->abortPutTransaction(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_abortPutTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status abortPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void abortPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_beginRmTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_beginRmTransaction() {
    }
    ~ExperimentalWithCallbackMethod_beginRmTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_commitRmTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_commitRmTransaction() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_commitRmTransaction<BaseClass>, ::DistributedFileSystem::FileInfo, ::DistributedFileSystem::FileInfo>(
          [this](::grpc::ServerContext* context,
                 const ::DistributedFileSystem::FileInfo* request,
                 ::DistributedFileSystem::FileInfo* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->commitRmTransaction(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_commitRmTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commitRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void commitRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_abortRmTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_abortRmTransaction() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_abortRmTransaction<BaseClass>, ::DistributedFileSystem::FileInfo, ::DistributedFileSystem::FileInfo>(
          [this](::grpc::ServerContext* context,
                 const ::DistributedFileSystem::FileInfo* request,
                 ::DistributedFileSystem::FileInfo* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->abortRmTransaction(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_abortRmTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status abortRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void abortRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_updateBlockInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_updateBlockInfo() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_updateBlockInfo<BaseClass>, ::DistributedFileSystem::BlockInfo, ::DistributedFileSystem::BlockInfo>(
          [this](::grpc::ServerContext* context,
                 const ::DistributedFileSystem::BlockInfo* request,
                 ::DistributedFileSystem::BlockInfo* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->updateBlockInfo(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_updateBlockInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateBlockInfo(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::DistributedFileSystem::BlockInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void updateBlockInfo(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::DistributedFileSystem::BlockInfo* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_startServer<ExperimentalWithCallbackMethod_terminateServer<ExperimentalWithCallbackMethod_beginGetTransaction<ExperimentalWithCallbackMethod_commitGetTransaction<ExperimentalWithCallbackMethod_abortGetTransaction<ExperimentalWithCallbackMethod_beginPutTransaction<ExperimentalWithCallbackMethod_commitPutTransaction<ExperimentalWithCallbackMethod_abortPutTransaction<ExperimentalWithCallbackMethod_beginRmTransaction<ExperimentalWithCallbackMethod_commitRmTransaction<ExperimentalWithCallbackMethod_abortRmTransaction<ExperimentalWithCallbackMethod_updateBlockInfo<Service > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_startServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_startServer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_startServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startServer(::grpc::ServerContext* context, const ::DistributedFileSystem::ServerInfo* request, ::DistributedFileSystem::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_terminateServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_terminateServer() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_terminateServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status terminateServer(::grpc::ServerContext* context, const ::DistributedFileSystem::ServerInfo* request, ::DistributedFileSystem::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_beginGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_beginGetTransaction() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_beginGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_commitGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_commitGetTransaction() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_commitGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commitGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_abortGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_abortGetTransaction() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_abortGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status abortGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_beginPutTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_beginPutTransaction() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_beginPutTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_commitPutTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_commitPutTransaction() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_commitPutTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commitPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_abortPutTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_abortPutTransaction() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_abortPutTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status abortPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_beginRmTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_beginRmTransaction() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_beginRmTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_commitRmTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_commitRmTransaction() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_commitRmTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commitRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_abortRmTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_abortRmTransaction() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_abortRmTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status abortRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_updateBlockInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_updateBlockInfo() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_updateBlockInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateBlockInfo(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::DistributedFileSystem::BlockInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_startServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_startServer() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_startServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startServer(::grpc::ServerContext* context, const ::DistributedFileSystem::ServerInfo* request, ::DistributedFileSystem::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststartServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_terminateServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_terminateServer() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_terminateServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status terminateServer(::grpc::ServerContext* context, const ::DistributedFileSystem::ServerInfo* request, ::DistributedFileSystem::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestterminateServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_beginGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_beginGetTransaction() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_beginGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbeginGetTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_commitGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_commitGetTransaction() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_commitGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commitGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcommitGetTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_abortGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_abortGetTransaction() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_abortGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status abortGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestabortGetTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_beginPutTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_beginPutTransaction() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_beginPutTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbeginPutTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_commitPutTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_commitPutTransaction() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_commitPutTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commitPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcommitPutTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_abortPutTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_abortPutTransaction() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_abortPutTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status abortPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestabortPutTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_beginRmTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_beginRmTransaction() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_beginRmTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbeginRmTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_commitRmTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_commitRmTransaction() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_commitRmTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commitRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcommitRmTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_abortRmTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_abortRmTransaction() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_abortRmTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status abortRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestabortRmTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_updateBlockInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_updateBlockInfo() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_updateBlockInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateBlockInfo(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::DistributedFileSystem::BlockInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateBlockInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_startServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_startServer() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_startServer<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->startServer(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_startServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status startServer(::grpc::ServerContext* context, const ::DistributedFileSystem::ServerInfo* request, ::DistributedFileSystem::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void startServer(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_terminateServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_terminateServer() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_terminateServer<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->terminateServer(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_terminateServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status terminateServer(::grpc::ServerContext* context, const ::DistributedFileSystem::ServerInfo* request, ::DistributedFileSystem::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void terminateServer(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_beginGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_beginGetTransaction() {
    }
    ~ExperimentalWithRawCallbackMethod_beginGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_commitGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_commitGetTransaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_commitGetTransaction<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->commitGetTransaction(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_commitGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commitGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void commitGetTransaction(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_abortGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_abortGetTransaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_abortGetTransaction<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->abortGetTransaction(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_abortGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status abortGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void abortGetTransaction(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_beginPutTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_beginPutTransaction() {
    }
    ~ExperimentalWithRawCallbackMethod_beginPutTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_commitPutTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_commitPutTransaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_commitPutTransaction<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->commitPutTransaction(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_commitPutTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commitPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void commitPutTransaction(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_abortPutTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_abortPutTransaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_abortPutTransaction<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->abortPutTransaction(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_abortPutTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status abortPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void abortPutTransaction(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_beginRmTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_beginRmTransaction() {
    }
    ~ExperimentalWithRawCallbackMethod_beginRmTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_commitRmTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_commitRmTransaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_commitRmTransaction<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->commitRmTransaction(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_commitRmTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commitRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void commitRmTransaction(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_abortRmTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_abortRmTransaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_abortRmTransaction<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->abortRmTransaction(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_abortRmTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status abortRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void abortRmTransaction(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_updateBlockInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_updateBlockInfo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_updateBlockInfo<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->updateBlockInfo(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_updateBlockInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateBlockInfo(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::DistributedFileSystem::BlockInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void updateBlockInfo(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_startServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_startServer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::DistributedFileSystem::ServerInfo, ::DistributedFileSystem::ServerInfo>(std::bind(&WithStreamedUnaryMethod_startServer<BaseClass>::StreamedstartServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_startServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status startServer(::grpc::ServerContext* context, const ::DistributedFileSystem::ServerInfo* request, ::DistributedFileSystem::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedstartServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistributedFileSystem::ServerInfo,::DistributedFileSystem::ServerInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_terminateServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_terminateServer() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::DistributedFileSystem::ServerInfo, ::DistributedFileSystem::ServerInfo>(std::bind(&WithStreamedUnaryMethod_terminateServer<BaseClass>::StreamedterminateServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_terminateServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status terminateServer(::grpc::ServerContext* context, const ::DistributedFileSystem::ServerInfo* request, ::DistributedFileSystem::ServerInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedterminateServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistributedFileSystem::ServerInfo,::DistributedFileSystem::ServerInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_commitGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_commitGetTransaction() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::DistributedFileSystem::FileInfo, ::DistributedFileSystem::FileInfo>(std::bind(&WithStreamedUnaryMethod_commitGetTransaction<BaseClass>::StreamedcommitGetTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_commitGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status commitGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcommitGetTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistributedFileSystem::FileInfo,::DistributedFileSystem::FileInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_abortGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_abortGetTransaction() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::DistributedFileSystem::FileInfo, ::DistributedFileSystem::FileInfo>(std::bind(&WithStreamedUnaryMethod_abortGetTransaction<BaseClass>::StreamedabortGetTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_abortGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status abortGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedabortGetTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistributedFileSystem::FileInfo,::DistributedFileSystem::FileInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_commitPutTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_commitPutTransaction() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::DistributedFileSystem::FileInfo, ::DistributedFileSystem::FileInfo>(std::bind(&WithStreamedUnaryMethod_commitPutTransaction<BaseClass>::StreamedcommitPutTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_commitPutTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status commitPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcommitPutTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistributedFileSystem::FileInfo,::DistributedFileSystem::FileInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_abortPutTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_abortPutTransaction() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::DistributedFileSystem::FileInfo, ::DistributedFileSystem::FileInfo>(std::bind(&WithStreamedUnaryMethod_abortPutTransaction<BaseClass>::StreamedabortPutTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_abortPutTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status abortPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedabortPutTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistributedFileSystem::FileInfo,::DistributedFileSystem::FileInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_commitRmTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_commitRmTransaction() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::DistributedFileSystem::FileInfo, ::DistributedFileSystem::FileInfo>(std::bind(&WithStreamedUnaryMethod_commitRmTransaction<BaseClass>::StreamedcommitRmTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_commitRmTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status commitRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcommitRmTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistributedFileSystem::FileInfo,::DistributedFileSystem::FileInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_abortRmTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_abortRmTransaction() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::DistributedFileSystem::FileInfo, ::DistributedFileSystem::FileInfo>(std::bind(&WithStreamedUnaryMethod_abortRmTransaction<BaseClass>::StreamedabortRmTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_abortRmTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status abortRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::DistributedFileSystem::FileInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedabortRmTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistributedFileSystem::FileInfo,::DistributedFileSystem::FileInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_updateBlockInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_updateBlockInfo() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::DistributedFileSystem::BlockInfo, ::DistributedFileSystem::BlockInfo>(std::bind(&WithStreamedUnaryMethod_updateBlockInfo<BaseClass>::StreamedupdateBlockInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_updateBlockInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status updateBlockInfo(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::DistributedFileSystem::BlockInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedupdateBlockInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistributedFileSystem::BlockInfo,::DistributedFileSystem::BlockInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_startServer<WithStreamedUnaryMethod_terminateServer<WithStreamedUnaryMethod_commitGetTransaction<WithStreamedUnaryMethod_abortGetTransaction<WithStreamedUnaryMethod_commitPutTransaction<WithStreamedUnaryMethod_abortPutTransaction<WithStreamedUnaryMethod_commitRmTransaction<WithStreamedUnaryMethod_abortRmTransaction<WithStreamedUnaryMethod_updateBlockInfo<Service > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_beginGetTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_beginGetTransaction() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::DistributedFileSystem::FileInfo, ::DistributedFileSystem::BlockStore>(std::bind(&WithSplitStreamingMethod_beginGetTransaction<BaseClass>::StreamedbeginGetTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_beginGetTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status beginGetTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedbeginGetTransaction(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::DistributedFileSystem::FileInfo,::DistributedFileSystem::BlockStore>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_beginPutTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_beginPutTransaction() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler< ::DistributedFileSystem::FileInfo, ::DistributedFileSystem::BlockStore>(std::bind(&WithSplitStreamingMethod_beginPutTransaction<BaseClass>::StreamedbeginPutTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_beginPutTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status beginPutTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedbeginPutTransaction(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::DistributedFileSystem::FileInfo,::DistributedFileSystem::BlockStore>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_beginRmTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_beginRmTransaction() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::SplitServerStreamingHandler< ::DistributedFileSystem::FileInfo, ::DistributedFileSystem::BlockStore>(std::bind(&WithSplitStreamingMethod_beginRmTransaction<BaseClass>::StreamedbeginRmTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_beginRmTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status beginRmTransaction(::grpc::ServerContext* context, const ::DistributedFileSystem::FileInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockStore>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedbeginRmTransaction(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::DistributedFileSystem::FileInfo,::DistributedFileSystem::BlockStore>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_beginGetTransaction<WithSplitStreamingMethod_beginPutTransaction<WithSplitStreamingMethod_beginRmTransaction<Service > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_startServer<WithStreamedUnaryMethod_terminateServer<WithSplitStreamingMethod_beginGetTransaction<WithStreamedUnaryMethod_commitGetTransaction<WithStreamedUnaryMethod_abortGetTransaction<WithSplitStreamingMethod_beginPutTransaction<WithStreamedUnaryMethod_commitPutTransaction<WithStreamedUnaryMethod_abortPutTransaction<WithSplitStreamingMethod_beginRmTransaction<WithStreamedUnaryMethod_commitRmTransaction<WithStreamedUnaryMethod_abortRmTransaction<WithStreamedUnaryMethod_updateBlockInfo<Service > > > > > > > > > > > > StreamedService;
};

class DataService final {
 public:
  static constexpr char const* service_full_name() {
    return "DistributedFileSystem.DataService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::DistributedFileSystem::BlockUnit>> getBlock(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::DistributedFileSystem::BlockUnit>>(getBlockRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockUnit>> AsyncgetBlock(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockUnit>>(AsyncgetBlockRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockUnit>> PrepareAsyncgetBlock(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockUnit>>(PrepareAsyncgetBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::DistributedFileSystem::BlockUnit>> putBlock(::grpc::ClientContext* context, ::DistributedFileSystem::BlockInfo* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::DistributedFileSystem::BlockUnit>>(putBlockRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistributedFileSystem::BlockUnit>> AsyncputBlock(::grpc::ClientContext* context, ::DistributedFileSystem::BlockInfo* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistributedFileSystem::BlockUnit>>(AsyncputBlockRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistributedFileSystem::BlockUnit>> PrepareAsyncputBlock(::grpc::ClientContext* context, ::DistributedFileSystem::BlockInfo* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistributedFileSystem::BlockUnit>>(PrepareAsyncputBlockRaw(context, response, cq));
    }
    virtual ::grpc::Status rmBlock(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::DistributedFileSystem::BlockInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::BlockInfo>> AsyncrmBlock(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::BlockInfo>>(AsyncrmBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::BlockInfo>> PrepareAsyncrmBlock(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::BlockInfo>>(PrepareAsyncrmBlockRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void rmBlock(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo* request, ::DistributedFileSystem::BlockInfo* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::DistributedFileSystem::BlockUnit>* getBlockRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockUnit>* AsyncgetBlockRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::DistributedFileSystem::BlockUnit>* PrepareAsyncgetBlockRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::DistributedFileSystem::BlockUnit>* putBlockRaw(::grpc::ClientContext* context, ::DistributedFileSystem::BlockInfo* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::DistributedFileSystem::BlockUnit>* AsyncputBlockRaw(::grpc::ClientContext* context, ::DistributedFileSystem::BlockInfo* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::DistributedFileSystem::BlockUnit>* PrepareAsyncputBlockRaw(::grpc::ClientContext* context, ::DistributedFileSystem::BlockInfo* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::BlockInfo>* AsyncrmBlockRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistributedFileSystem::BlockInfo>* PrepareAsyncrmBlockRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::DistributedFileSystem::BlockUnit>> getBlock(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::DistributedFileSystem::BlockUnit>>(getBlockRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockUnit>> AsyncgetBlock(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockUnit>>(AsyncgetBlockRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockUnit>> PrepareAsyncgetBlock(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockUnit>>(PrepareAsyncgetBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::DistributedFileSystem::BlockUnit>> putBlock(::grpc::ClientContext* context, ::DistributedFileSystem::BlockInfo* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::DistributedFileSystem::BlockUnit>>(putBlockRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistributedFileSystem::BlockUnit>> AsyncputBlock(::grpc::ClientContext* context, ::DistributedFileSystem::BlockInfo* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistributedFileSystem::BlockUnit>>(AsyncputBlockRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistributedFileSystem::BlockUnit>> PrepareAsyncputBlock(::grpc::ClientContext* context, ::DistributedFileSystem::BlockInfo* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistributedFileSystem::BlockUnit>>(PrepareAsyncputBlockRaw(context, response, cq));
    }
    ::grpc::Status rmBlock(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::DistributedFileSystem::BlockInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::BlockInfo>> AsyncrmBlock(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::BlockInfo>>(AsyncrmBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::BlockInfo>> PrepareAsyncrmBlock(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::BlockInfo>>(PrepareAsyncrmBlockRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void rmBlock(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo* request, ::DistributedFileSystem::BlockInfo* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::DistributedFileSystem::BlockUnit>* getBlockRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request) override;
    ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockUnit>* AsyncgetBlockRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::DistributedFileSystem::BlockUnit>* PrepareAsyncgetBlockRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::DistributedFileSystem::BlockUnit>* putBlockRaw(::grpc::ClientContext* context, ::DistributedFileSystem::BlockInfo* response) override;
    ::grpc::ClientAsyncWriter< ::DistributedFileSystem::BlockUnit>* AsyncputBlockRaw(::grpc::ClientContext* context, ::DistributedFileSystem::BlockInfo* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::DistributedFileSystem::BlockUnit>* PrepareAsyncputBlockRaw(::grpc::ClientContext* context, ::DistributedFileSystem::BlockInfo* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::BlockInfo>* AsyncrmBlockRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DistributedFileSystem::BlockInfo>* PrepareAsyncrmBlockRaw(::grpc::ClientContext* context, const ::DistributedFileSystem::BlockInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_putBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_rmBlock_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getBlock(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockUnit>* writer);
    virtual ::grpc::Status putBlock(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistributedFileSystem::BlockUnit>* reader, ::DistributedFileSystem::BlockInfo* response);
    virtual ::grpc::Status rmBlock(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::DistributedFileSystem::BlockInfo* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getBlock() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBlock(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockUnit>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetBlock(::grpc::ServerContext* context, ::DistributedFileSystem::BlockInfo* request, ::grpc::ServerAsyncWriter< ::DistributedFileSystem::BlockUnit>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_putBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_putBlock() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_putBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status putBlock(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistributedFileSystem::BlockUnit>* reader, ::DistributedFileSystem::BlockInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestputBlock(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::DistributedFileSystem::BlockInfo, ::DistributedFileSystem::BlockUnit>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_rmBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_rmBlock() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_rmBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rmBlock(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::DistributedFileSystem::BlockInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrmBlock(::grpc::ServerContext* context, ::DistributedFileSystem::BlockInfo* request, ::grpc::ServerAsyncResponseWriter< ::DistributedFileSystem::BlockInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getBlock<WithAsyncMethod_putBlock<WithAsyncMethod_rmBlock<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getBlock() {
    }
    ~ExperimentalWithCallbackMethod_getBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBlock(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockUnit>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_putBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_putBlock() {
    }
    ~ExperimentalWithCallbackMethod_putBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status putBlock(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistributedFileSystem::BlockUnit>* reader, ::DistributedFileSystem::BlockInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_rmBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_rmBlock() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_rmBlock<BaseClass>, ::DistributedFileSystem::BlockInfo, ::DistributedFileSystem::BlockInfo>(
          [this](::grpc::ServerContext* context,
                 const ::DistributedFileSystem::BlockInfo* request,
                 ::DistributedFileSystem::BlockInfo* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->rmBlock(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_rmBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rmBlock(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::DistributedFileSystem::BlockInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void rmBlock(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::DistributedFileSystem::BlockInfo* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_getBlock<ExperimentalWithCallbackMethod_putBlock<ExperimentalWithCallbackMethod_rmBlock<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getBlock() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBlock(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockUnit>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_putBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_putBlock() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_putBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status putBlock(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistributedFileSystem::BlockUnit>* reader, ::DistributedFileSystem::BlockInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_rmBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_rmBlock() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_rmBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rmBlock(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::DistributedFileSystem::BlockInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getBlock() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBlock(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockUnit>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_putBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_putBlock() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_putBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status putBlock(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistributedFileSystem::BlockUnit>* reader, ::DistributedFileSystem::BlockInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestputBlock(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_rmBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_rmBlock() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_rmBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rmBlock(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::DistributedFileSystem::BlockInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrmBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getBlock() {
    }
    ~ExperimentalWithRawCallbackMethod_getBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBlock(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockUnit>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_putBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_putBlock() {
    }
    ~ExperimentalWithRawCallbackMethod_putBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status putBlock(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistributedFileSystem::BlockUnit>* reader, ::DistributedFileSystem::BlockInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_rmBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_rmBlock() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_rmBlock<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->rmBlock(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_rmBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rmBlock(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::DistributedFileSystem::BlockInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void rmBlock(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_rmBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_rmBlock() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::DistributedFileSystem::BlockInfo, ::DistributedFileSystem::BlockInfo>(std::bind(&WithStreamedUnaryMethod_rmBlock<BaseClass>::StreamedrmBlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_rmBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status rmBlock(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::DistributedFileSystem::BlockInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrmBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistributedFileSystem::BlockInfo,::DistributedFileSystem::BlockInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_rmBlock<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_getBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_getBlock() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::DistributedFileSystem::BlockInfo, ::DistributedFileSystem::BlockUnit>(std::bind(&WithSplitStreamingMethod_getBlock<BaseClass>::StreamedgetBlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_getBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getBlock(::grpc::ServerContext* context, const ::DistributedFileSystem::BlockInfo* request, ::grpc::ServerWriter< ::DistributedFileSystem::BlockUnit>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedgetBlock(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::DistributedFileSystem::BlockInfo,::DistributedFileSystem::BlockUnit>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_getBlock<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_getBlock<WithStreamedUnaryMethod_rmBlock<Service > > StreamedService;
};

}  // namespace DistributedFileSystem


#endif  // GRPC_DistributedFileSystem_2eproto__INCLUDED
