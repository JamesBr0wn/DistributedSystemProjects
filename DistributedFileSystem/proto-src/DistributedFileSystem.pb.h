// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DistributedFileSystem.proto

#ifndef PROTOBUF_INCLUDED_DistributedFileSystem_2eproto
#define PROTOBUF_INCLUDED_DistributedFileSystem_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_DistributedFileSystem_2eproto 

namespace protobuf_DistributedFileSystem_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_DistributedFileSystem_2eproto
namespace DistributedFileSystem {
class BlockInfo;
class BlockInfoDefaultTypeInternal;
extern BlockInfoDefaultTypeInternal _BlockInfo_default_instance_;
class BlockStore;
class BlockStoreDefaultTypeInternal;
extern BlockStoreDefaultTypeInternal _BlockStore_default_instance_;
class BlockUnit;
class BlockUnitDefaultTypeInternal;
extern BlockUnitDefaultTypeInternal _BlockUnit_default_instance_;
class FileInfo;
class FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class ServerInfo;
class ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
}  // namespace DistributedFileSystem
namespace google {
namespace protobuf {
template<> ::DistributedFileSystem::BlockInfo* Arena::CreateMaybeMessage<::DistributedFileSystem::BlockInfo>(Arena*);
template<> ::DistributedFileSystem::BlockStore* Arena::CreateMaybeMessage<::DistributedFileSystem::BlockStore>(Arena*);
template<> ::DistributedFileSystem::BlockUnit* Arena::CreateMaybeMessage<::DistributedFileSystem::BlockUnit>(Arena*);
template<> ::DistributedFileSystem::FileInfo* Arena::CreateMaybeMessage<::DistributedFileSystem::FileInfo>(Arena*);
template<> ::DistributedFileSystem::ServerInfo* Arena::CreateMaybeMessage<::DistributedFileSystem::ServerInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace DistributedFileSystem {

// ===================================================================

class ServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DistributedFileSystem.ServerInfo) */ {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ServerInfo* other);
  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const final {
    return CreateMaybeMessage<ServerInfo>(NULL);
  }

  ServerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // bytes hash = 2;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // @@protoc_insertion_point(class_scope:DistributedFileSystem.ServerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DistributedFileSystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DistributedFileSystem.FileInfo) */ {
 public:
  FileInfo();
  virtual ~FileInfo();

  FileInfo(const FileInfo& from);

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FileInfo* other);
  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileInfo* New() const final {
    return CreateMaybeMessage<FileInfo>(NULL);
  }

  FileInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fileName = 1;
  void clear_filename();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // uint64 fileSize = 2;
  void clear_filesize();
  static const int kFileSizeFieldNumber = 2;
  ::google::protobuf::uint64 filesize() const;
  void set_filesize(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:DistributedFileSystem.FileInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::uint64 filesize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DistributedFileSystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlockStore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DistributedFileSystem.BlockStore) */ {
 public:
  BlockStore();
  virtual ~BlockStore();

  BlockStore(const BlockStore& from);

  inline BlockStore& operator=(const BlockStore& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockStore(BlockStore&& from) noexcept
    : BlockStore() {
    *this = ::std::move(from);
  }

  inline BlockStore& operator=(BlockStore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockStore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockStore* internal_default_instance() {
    return reinterpret_cast<const BlockStore*>(
               &_BlockStore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BlockStore* other);
  friend void swap(BlockStore& a, BlockStore& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockStore* New() const final {
    return CreateMaybeMessage<BlockStore>(NULL);
  }

  BlockStore* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlockStore>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlockStore& from);
  void MergeFrom(const BlockStore& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockStore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string serverAddress = 1;
  void clear_serveraddress();
  static const int kServerAddressFieldNumber = 1;
  const ::std::string& serveraddress() const;
  void set_serveraddress(const ::std::string& value);
  #if LANG_CXX11
  void set_serveraddress(::std::string&& value);
  #endif
  void set_serveraddress(const char* value);
  void set_serveraddress(const char* value, size_t size);
  ::std::string* mutable_serveraddress();
  ::std::string* release_serveraddress();
  void set_allocated_serveraddress(::std::string* serveraddress);

  // bytes serverHash = 2;
  void clear_serverhash();
  static const int kServerHashFieldNumber = 2;
  const ::std::string& serverhash() const;
  void set_serverhash(const ::std::string& value);
  #if LANG_CXX11
  void set_serverhash(::std::string&& value);
  #endif
  void set_serverhash(const char* value);
  void set_serverhash(const void* value, size_t size);
  ::std::string* mutable_serverhash();
  ::std::string* release_serverhash();
  void set_allocated_serverhash(::std::string* serverhash);

  // string fileName = 3;
  void clear_filename();
  static const int kFileNameFieldNumber = 3;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // bytes blockHash = 6;
  void clear_blockhash();
  static const int kBlockHashFieldNumber = 6;
  const ::std::string& blockhash() const;
  void set_blockhash(const ::std::string& value);
  #if LANG_CXX11
  void set_blockhash(::std::string&& value);
  #endif
  void set_blockhash(const char* value);
  void set_blockhash(const void* value, size_t size);
  ::std::string* mutable_blockhash();
  ::std::string* release_blockhash();
  void set_allocated_blockhash(::std::string* blockhash);

  // uint64 blockIdx = 4;
  void clear_blockidx();
  static const int kBlockIdxFieldNumber = 4;
  ::google::protobuf::uint64 blockidx() const;
  void set_blockidx(::google::protobuf::uint64 value);

  // uint64 blockSize = 5;
  void clear_blocksize();
  static const int kBlockSizeFieldNumber = 5;
  ::google::protobuf::uint64 blocksize() const;
  void set_blocksize(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:DistributedFileSystem.BlockStore)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr serveraddress_;
  ::google::protobuf::internal::ArenaStringPtr serverhash_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr blockhash_;
  ::google::protobuf::uint64 blockidx_;
  ::google::protobuf::uint64 blocksize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DistributedFileSystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlockInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DistributedFileSystem.BlockInfo) */ {
 public:
  BlockInfo();
  virtual ~BlockInfo();

  BlockInfo(const BlockInfo& from);

  inline BlockInfo& operator=(const BlockInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockInfo(BlockInfo&& from) noexcept
    : BlockInfo() {
    *this = ::std::move(from);
  }

  inline BlockInfo& operator=(BlockInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockInfo* internal_default_instance() {
    return reinterpret_cast<const BlockInfo*>(
               &_BlockInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(BlockInfo* other);
  friend void swap(BlockInfo& a, BlockInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockInfo* New() const final {
    return CreateMaybeMessage<BlockInfo>(NULL);
  }

  BlockInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlockInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlockInfo& from);
  void MergeFrom(const BlockInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fileName = 1;
  void clear_filename();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // bytes blockHash = 4;
  void clear_blockhash();
  static const int kBlockHashFieldNumber = 4;
  const ::std::string& blockhash() const;
  void set_blockhash(const ::std::string& value);
  #if LANG_CXX11
  void set_blockhash(::std::string&& value);
  #endif
  void set_blockhash(const char* value);
  void set_blockhash(const void* value, size_t size);
  ::std::string* mutable_blockhash();
  ::std::string* release_blockhash();
  void set_allocated_blockhash(::std::string* blockhash);

  // uint64 blockIdx = 2;
  void clear_blockidx();
  static const int kBlockIdxFieldNumber = 2;
  ::google::protobuf::uint64 blockidx() const;
  void set_blockidx(::google::protobuf::uint64 value);

  // uint64 blockSize = 3;
  void clear_blocksize();
  static const int kBlockSizeFieldNumber = 3;
  ::google::protobuf::uint64 blocksize() const;
  void set_blocksize(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:DistributedFileSystem.BlockInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr blockhash_;
  ::google::protobuf::uint64 blockidx_;
  ::google::protobuf::uint64 blocksize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DistributedFileSystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlockUnit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DistributedFileSystem.BlockUnit) */ {
 public:
  BlockUnit();
  virtual ~BlockUnit();

  BlockUnit(const BlockUnit& from);

  inline BlockUnit& operator=(const BlockUnit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockUnit(BlockUnit&& from) noexcept
    : BlockUnit() {
    *this = ::std::move(from);
  }

  inline BlockUnit& operator=(BlockUnit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockUnit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockUnit* internal_default_instance() {
    return reinterpret_cast<const BlockUnit*>(
               &_BlockUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(BlockUnit* other);
  friend void swap(BlockUnit& a, BlockUnit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockUnit* New() const final {
    return CreateMaybeMessage<BlockUnit>(NULL);
  }

  BlockUnit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlockUnit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlockUnit& from);
  void MergeFrom(const BlockUnit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockUnit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fileName = 1;
  void clear_filename();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // bytes unitData = 4;
  void clear_unitdata();
  static const int kUnitDataFieldNumber = 4;
  const ::std::string& unitdata() const;
  void set_unitdata(const ::std::string& value);
  #if LANG_CXX11
  void set_unitdata(::std::string&& value);
  #endif
  void set_unitdata(const char* value);
  void set_unitdata(const void* value, size_t size);
  ::std::string* mutable_unitdata();
  ::std::string* release_unitdata();
  void set_allocated_unitdata(::std::string* unitdata);

  // uint64 blockIdx = 2;
  void clear_blockidx();
  static const int kBlockIdxFieldNumber = 2;
  ::google::protobuf::uint64 blockidx() const;
  void set_blockidx(::google::protobuf::uint64 value);

  // uint64 unitIdx = 3;
  void clear_unitidx();
  static const int kUnitIdxFieldNumber = 3;
  ::google::protobuf::uint64 unitidx() const;
  void set_unitidx(::google::protobuf::uint64 value);

  // bool lastUnit = 5;
  void clear_lastunit();
  static const int kLastUnitFieldNumber = 5;
  bool lastunit() const;
  void set_lastunit(bool value);

  // @@protoc_insertion_point(class_scope:DistributedFileSystem.BlockUnit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr unitdata_;
  ::google::protobuf::uint64 blockidx_;
  ::google::protobuf::uint64 unitidx_;
  bool lastunit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DistributedFileSystem_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerInfo

// string address = 1;
inline void ServerInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfo::address() const {
  // @@protoc_insertion_point(field_get:DistributedFileSystem.ServerInfo.address)
  return address_.GetNoArena();
}
inline void ServerInfo::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistributedFileSystem.ServerInfo.address)
}
#if LANG_CXX11
inline void ServerInfo::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistributedFileSystem.ServerInfo.address)
}
#endif
inline void ServerInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistributedFileSystem.ServerInfo.address)
}
inline void ServerInfo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistributedFileSystem.ServerInfo.address)
}
inline ::std::string* ServerInfo::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:DistributedFileSystem.ServerInfo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfo::release_address() {
  // @@protoc_insertion_point(field_release:DistributedFileSystem.ServerInfo.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:DistributedFileSystem.ServerInfo.address)
}

// bytes hash = 2;
inline void ServerInfo::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfo::hash() const {
  // @@protoc_insertion_point(field_get:DistributedFileSystem.ServerInfo.hash)
  return hash_.GetNoArena();
}
inline void ServerInfo::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistributedFileSystem.ServerInfo.hash)
}
#if LANG_CXX11
inline void ServerInfo::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistributedFileSystem.ServerInfo.hash)
}
#endif
inline void ServerInfo::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistributedFileSystem.ServerInfo.hash)
}
inline void ServerInfo::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistributedFileSystem.ServerInfo.hash)
}
inline ::std::string* ServerInfo::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:DistributedFileSystem.ServerInfo.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfo::release_hash() {
  // @@protoc_insertion_point(field_release:DistributedFileSystem.ServerInfo.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:DistributedFileSystem.ServerInfo.hash)
}

// -------------------------------------------------------------------

// FileInfo

// string fileName = 1;
inline void FileInfo::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileInfo::filename() const {
  // @@protoc_insertion_point(field_get:DistributedFileSystem.FileInfo.fileName)
  return filename_.GetNoArena();
}
inline void FileInfo::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistributedFileSystem.FileInfo.fileName)
}
#if LANG_CXX11
inline void FileInfo::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistributedFileSystem.FileInfo.fileName)
}
#endif
inline void FileInfo::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistributedFileSystem.FileInfo.fileName)
}
inline void FileInfo::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistributedFileSystem.FileInfo.fileName)
}
inline ::std::string* FileInfo::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:DistributedFileSystem.FileInfo.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileInfo::release_filename() {
  // @@protoc_insertion_point(field_release:DistributedFileSystem.FileInfo.fileName)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:DistributedFileSystem.FileInfo.fileName)
}

// uint64 fileSize = 2;
inline void FileInfo::clear_filesize() {
  filesize_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FileInfo::filesize() const {
  // @@protoc_insertion_point(field_get:DistributedFileSystem.FileInfo.fileSize)
  return filesize_;
}
inline void FileInfo::set_filesize(::google::protobuf::uint64 value) {
  
  filesize_ = value;
  // @@protoc_insertion_point(field_set:DistributedFileSystem.FileInfo.fileSize)
}

// -------------------------------------------------------------------

// BlockStore

// string serverAddress = 1;
inline void BlockStore::clear_serveraddress() {
  serveraddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockStore::serveraddress() const {
  // @@protoc_insertion_point(field_get:DistributedFileSystem.BlockStore.serverAddress)
  return serveraddress_.GetNoArena();
}
inline void BlockStore::set_serveraddress(const ::std::string& value) {
  
  serveraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistributedFileSystem.BlockStore.serverAddress)
}
#if LANG_CXX11
inline void BlockStore::set_serveraddress(::std::string&& value) {
  
  serveraddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistributedFileSystem.BlockStore.serverAddress)
}
#endif
inline void BlockStore::set_serveraddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serveraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistributedFileSystem.BlockStore.serverAddress)
}
inline void BlockStore::set_serveraddress(const char* value, size_t size) {
  
  serveraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistributedFileSystem.BlockStore.serverAddress)
}
inline ::std::string* BlockStore::mutable_serveraddress() {
  
  // @@protoc_insertion_point(field_mutable:DistributedFileSystem.BlockStore.serverAddress)
  return serveraddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockStore::release_serveraddress() {
  // @@protoc_insertion_point(field_release:DistributedFileSystem.BlockStore.serverAddress)
  
  return serveraddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockStore::set_allocated_serveraddress(::std::string* serveraddress) {
  if (serveraddress != NULL) {
    
  } else {
    
  }
  serveraddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serveraddress);
  // @@protoc_insertion_point(field_set_allocated:DistributedFileSystem.BlockStore.serverAddress)
}

// bytes serverHash = 2;
inline void BlockStore::clear_serverhash() {
  serverhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockStore::serverhash() const {
  // @@protoc_insertion_point(field_get:DistributedFileSystem.BlockStore.serverHash)
  return serverhash_.GetNoArena();
}
inline void BlockStore::set_serverhash(const ::std::string& value) {
  
  serverhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistributedFileSystem.BlockStore.serverHash)
}
#if LANG_CXX11
inline void BlockStore::set_serverhash(::std::string&& value) {
  
  serverhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistributedFileSystem.BlockStore.serverHash)
}
#endif
inline void BlockStore::set_serverhash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serverhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistributedFileSystem.BlockStore.serverHash)
}
inline void BlockStore::set_serverhash(const void* value, size_t size) {
  
  serverhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistributedFileSystem.BlockStore.serverHash)
}
inline ::std::string* BlockStore::mutable_serverhash() {
  
  // @@protoc_insertion_point(field_mutable:DistributedFileSystem.BlockStore.serverHash)
  return serverhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockStore::release_serverhash() {
  // @@protoc_insertion_point(field_release:DistributedFileSystem.BlockStore.serverHash)
  
  return serverhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockStore::set_allocated_serverhash(::std::string* serverhash) {
  if (serverhash != NULL) {
    
  } else {
    
  }
  serverhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverhash);
  // @@protoc_insertion_point(field_set_allocated:DistributedFileSystem.BlockStore.serverHash)
}

// string fileName = 3;
inline void BlockStore::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockStore::filename() const {
  // @@protoc_insertion_point(field_get:DistributedFileSystem.BlockStore.fileName)
  return filename_.GetNoArena();
}
inline void BlockStore::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistributedFileSystem.BlockStore.fileName)
}
#if LANG_CXX11
inline void BlockStore::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistributedFileSystem.BlockStore.fileName)
}
#endif
inline void BlockStore::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistributedFileSystem.BlockStore.fileName)
}
inline void BlockStore::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistributedFileSystem.BlockStore.fileName)
}
inline ::std::string* BlockStore::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:DistributedFileSystem.BlockStore.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockStore::release_filename() {
  // @@protoc_insertion_point(field_release:DistributedFileSystem.BlockStore.fileName)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockStore::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:DistributedFileSystem.BlockStore.fileName)
}

// uint64 blockIdx = 4;
inline void BlockStore::clear_blockidx() {
  blockidx_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BlockStore::blockidx() const {
  // @@protoc_insertion_point(field_get:DistributedFileSystem.BlockStore.blockIdx)
  return blockidx_;
}
inline void BlockStore::set_blockidx(::google::protobuf::uint64 value) {
  
  blockidx_ = value;
  // @@protoc_insertion_point(field_set:DistributedFileSystem.BlockStore.blockIdx)
}

// uint64 blockSize = 5;
inline void BlockStore::clear_blocksize() {
  blocksize_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BlockStore::blocksize() const {
  // @@protoc_insertion_point(field_get:DistributedFileSystem.BlockStore.blockSize)
  return blocksize_;
}
inline void BlockStore::set_blocksize(::google::protobuf::uint64 value) {
  
  blocksize_ = value;
  // @@protoc_insertion_point(field_set:DistributedFileSystem.BlockStore.blockSize)
}

// bytes blockHash = 6;
inline void BlockStore::clear_blockhash() {
  blockhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockStore::blockhash() const {
  // @@protoc_insertion_point(field_get:DistributedFileSystem.BlockStore.blockHash)
  return blockhash_.GetNoArena();
}
inline void BlockStore::set_blockhash(const ::std::string& value) {
  
  blockhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistributedFileSystem.BlockStore.blockHash)
}
#if LANG_CXX11
inline void BlockStore::set_blockhash(::std::string&& value) {
  
  blockhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistributedFileSystem.BlockStore.blockHash)
}
#endif
inline void BlockStore::set_blockhash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  blockhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistributedFileSystem.BlockStore.blockHash)
}
inline void BlockStore::set_blockhash(const void* value, size_t size) {
  
  blockhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistributedFileSystem.BlockStore.blockHash)
}
inline ::std::string* BlockStore::mutable_blockhash() {
  
  // @@protoc_insertion_point(field_mutable:DistributedFileSystem.BlockStore.blockHash)
  return blockhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockStore::release_blockhash() {
  // @@protoc_insertion_point(field_release:DistributedFileSystem.BlockStore.blockHash)
  
  return blockhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockStore::set_allocated_blockhash(::std::string* blockhash) {
  if (blockhash != NULL) {
    
  } else {
    
  }
  blockhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockhash);
  // @@protoc_insertion_point(field_set_allocated:DistributedFileSystem.BlockStore.blockHash)
}

// -------------------------------------------------------------------

// BlockInfo

// string fileName = 1;
inline void BlockInfo::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockInfo::filename() const {
  // @@protoc_insertion_point(field_get:DistributedFileSystem.BlockInfo.fileName)
  return filename_.GetNoArena();
}
inline void BlockInfo::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistributedFileSystem.BlockInfo.fileName)
}
#if LANG_CXX11
inline void BlockInfo::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistributedFileSystem.BlockInfo.fileName)
}
#endif
inline void BlockInfo::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistributedFileSystem.BlockInfo.fileName)
}
inline void BlockInfo::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistributedFileSystem.BlockInfo.fileName)
}
inline ::std::string* BlockInfo::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:DistributedFileSystem.BlockInfo.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockInfo::release_filename() {
  // @@protoc_insertion_point(field_release:DistributedFileSystem.BlockInfo.fileName)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockInfo::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:DistributedFileSystem.BlockInfo.fileName)
}

// uint64 blockIdx = 2;
inline void BlockInfo::clear_blockidx() {
  blockidx_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BlockInfo::blockidx() const {
  // @@protoc_insertion_point(field_get:DistributedFileSystem.BlockInfo.blockIdx)
  return blockidx_;
}
inline void BlockInfo::set_blockidx(::google::protobuf::uint64 value) {
  
  blockidx_ = value;
  // @@protoc_insertion_point(field_set:DistributedFileSystem.BlockInfo.blockIdx)
}

// uint64 blockSize = 3;
inline void BlockInfo::clear_blocksize() {
  blocksize_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BlockInfo::blocksize() const {
  // @@protoc_insertion_point(field_get:DistributedFileSystem.BlockInfo.blockSize)
  return blocksize_;
}
inline void BlockInfo::set_blocksize(::google::protobuf::uint64 value) {
  
  blocksize_ = value;
  // @@protoc_insertion_point(field_set:DistributedFileSystem.BlockInfo.blockSize)
}

// bytes blockHash = 4;
inline void BlockInfo::clear_blockhash() {
  blockhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockInfo::blockhash() const {
  // @@protoc_insertion_point(field_get:DistributedFileSystem.BlockInfo.blockHash)
  return blockhash_.GetNoArena();
}
inline void BlockInfo::set_blockhash(const ::std::string& value) {
  
  blockhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistributedFileSystem.BlockInfo.blockHash)
}
#if LANG_CXX11
inline void BlockInfo::set_blockhash(::std::string&& value) {
  
  blockhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistributedFileSystem.BlockInfo.blockHash)
}
#endif
inline void BlockInfo::set_blockhash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  blockhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistributedFileSystem.BlockInfo.blockHash)
}
inline void BlockInfo::set_blockhash(const void* value, size_t size) {
  
  blockhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistributedFileSystem.BlockInfo.blockHash)
}
inline ::std::string* BlockInfo::mutable_blockhash() {
  
  // @@protoc_insertion_point(field_mutable:DistributedFileSystem.BlockInfo.blockHash)
  return blockhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockInfo::release_blockhash() {
  // @@protoc_insertion_point(field_release:DistributedFileSystem.BlockInfo.blockHash)
  
  return blockhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockInfo::set_allocated_blockhash(::std::string* blockhash) {
  if (blockhash != NULL) {
    
  } else {
    
  }
  blockhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockhash);
  // @@protoc_insertion_point(field_set_allocated:DistributedFileSystem.BlockInfo.blockHash)
}

// -------------------------------------------------------------------

// BlockUnit

// string fileName = 1;
inline void BlockUnit::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockUnit::filename() const {
  // @@protoc_insertion_point(field_get:DistributedFileSystem.BlockUnit.fileName)
  return filename_.GetNoArena();
}
inline void BlockUnit::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistributedFileSystem.BlockUnit.fileName)
}
#if LANG_CXX11
inline void BlockUnit::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistributedFileSystem.BlockUnit.fileName)
}
#endif
inline void BlockUnit::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistributedFileSystem.BlockUnit.fileName)
}
inline void BlockUnit::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistributedFileSystem.BlockUnit.fileName)
}
inline ::std::string* BlockUnit::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:DistributedFileSystem.BlockUnit.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockUnit::release_filename() {
  // @@protoc_insertion_point(field_release:DistributedFileSystem.BlockUnit.fileName)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockUnit::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:DistributedFileSystem.BlockUnit.fileName)
}

// uint64 blockIdx = 2;
inline void BlockUnit::clear_blockidx() {
  blockidx_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BlockUnit::blockidx() const {
  // @@protoc_insertion_point(field_get:DistributedFileSystem.BlockUnit.blockIdx)
  return blockidx_;
}
inline void BlockUnit::set_blockidx(::google::protobuf::uint64 value) {
  
  blockidx_ = value;
  // @@protoc_insertion_point(field_set:DistributedFileSystem.BlockUnit.blockIdx)
}

// uint64 unitIdx = 3;
inline void BlockUnit::clear_unitidx() {
  unitidx_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BlockUnit::unitidx() const {
  // @@protoc_insertion_point(field_get:DistributedFileSystem.BlockUnit.unitIdx)
  return unitidx_;
}
inline void BlockUnit::set_unitidx(::google::protobuf::uint64 value) {
  
  unitidx_ = value;
  // @@protoc_insertion_point(field_set:DistributedFileSystem.BlockUnit.unitIdx)
}

// bytes unitData = 4;
inline void BlockUnit::clear_unitdata() {
  unitdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockUnit::unitdata() const {
  // @@protoc_insertion_point(field_get:DistributedFileSystem.BlockUnit.unitData)
  return unitdata_.GetNoArena();
}
inline void BlockUnit::set_unitdata(const ::std::string& value) {
  
  unitdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistributedFileSystem.BlockUnit.unitData)
}
#if LANG_CXX11
inline void BlockUnit::set_unitdata(::std::string&& value) {
  
  unitdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistributedFileSystem.BlockUnit.unitData)
}
#endif
inline void BlockUnit::set_unitdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unitdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistributedFileSystem.BlockUnit.unitData)
}
inline void BlockUnit::set_unitdata(const void* value, size_t size) {
  
  unitdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistributedFileSystem.BlockUnit.unitData)
}
inline ::std::string* BlockUnit::mutable_unitdata() {
  
  // @@protoc_insertion_point(field_mutable:DistributedFileSystem.BlockUnit.unitData)
  return unitdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockUnit::release_unitdata() {
  // @@protoc_insertion_point(field_release:DistributedFileSystem.BlockUnit.unitData)
  
  return unitdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockUnit::set_allocated_unitdata(::std::string* unitdata) {
  if (unitdata != NULL) {
    
  } else {
    
  }
  unitdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unitdata);
  // @@protoc_insertion_point(field_set_allocated:DistributedFileSystem.BlockUnit.unitData)
}

// bool lastUnit = 5;
inline void BlockUnit::clear_lastunit() {
  lastunit_ = false;
}
inline bool BlockUnit::lastunit() const {
  // @@protoc_insertion_point(field_get:DistributedFileSystem.BlockUnit.lastUnit)
  return lastunit_;
}
inline void BlockUnit::set_lastunit(bool value) {
  
  lastunit_ = value;
  // @@protoc_insertion_point(field_set:DistributedFileSystem.BlockUnit.lastUnit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DistributedFileSystem

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_DistributedFileSystem_2eproto
