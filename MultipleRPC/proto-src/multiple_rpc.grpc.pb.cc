// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: multiple_rpc.proto

#include "multiple_rpc.pb.h"
#include "multiple_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace multiple_rpc {

static const char* ProxyService_method_names[] = {
  "/multiple_rpc.ProxyService/GetServerInfo",
  "/multiple_rpc.ProxyService/SetServerInfo",
  "/multiple_rpc.ProxyService/UnsetServerInfo",
  "/multiple_rpc.ProxyService/SayHello",
};

std::unique_ptr< ProxyService::Stub> ProxyService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProxyService::Stub> stub(new ProxyService::Stub(channel));
  return stub;
}

ProxyService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetServerInfo_(ProxyService_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetServerInfo_(ProxyService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnsetServerInfo_(ProxyService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SayHello_(ProxyService_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::multiple_rpc::Address>* ProxyService::Stub::GetServerInfoRaw(::grpc::ClientContext* context, const ::multiple_rpc::User& request) {
  return ::grpc::internal::ClientReaderFactory< ::multiple_rpc::Address>::Create(channel_.get(), rpcmethod_GetServerInfo_, context, request);
}

::grpc::ClientAsyncReader< ::multiple_rpc::Address>* ProxyService::Stub::AsyncGetServerInfoRaw(::grpc::ClientContext* context, const ::multiple_rpc::User& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::multiple_rpc::Address>::Create(channel_.get(), cq, rpcmethod_GetServerInfo_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::multiple_rpc::Address>* ProxyService::Stub::PrepareAsyncGetServerInfoRaw(::grpc::ClientContext* context, const ::multiple_rpc::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::multiple_rpc::Address>::Create(channel_.get(), cq, rpcmethod_GetServerInfo_, context, request, false, nullptr);
}

::grpc::Status ProxyService::Stub::SetServerInfo(::grpc::ClientContext* context, const ::multiple_rpc::Address& request, ::multiple_rpc::Message* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetServerInfo_, context, request, response);
}

void ProxyService::Stub::experimental_async::SetServerInfo(::grpc::ClientContext* context, const ::multiple_rpc::Address* request, ::multiple_rpc::Message* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetServerInfo_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::multiple_rpc::Message>* ProxyService::Stub::AsyncSetServerInfoRaw(::grpc::ClientContext* context, const ::multiple_rpc::Address& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::multiple_rpc::Message>::Create(channel_.get(), cq, rpcmethod_SetServerInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::multiple_rpc::Message>* ProxyService::Stub::PrepareAsyncSetServerInfoRaw(::grpc::ClientContext* context, const ::multiple_rpc::Address& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::multiple_rpc::Message>::Create(channel_.get(), cq, rpcmethod_SetServerInfo_, context, request, false);
}

::grpc::Status ProxyService::Stub::UnsetServerInfo(::grpc::ClientContext* context, const ::multiple_rpc::Address& request, ::multiple_rpc::Message* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnsetServerInfo_, context, request, response);
}

void ProxyService::Stub::experimental_async::UnsetServerInfo(::grpc::ClientContext* context, const ::multiple_rpc::Address* request, ::multiple_rpc::Message* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnsetServerInfo_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::multiple_rpc::Message>* ProxyService::Stub::AsyncUnsetServerInfoRaw(::grpc::ClientContext* context, const ::multiple_rpc::Address& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::multiple_rpc::Message>::Create(channel_.get(), cq, rpcmethod_UnsetServerInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::multiple_rpc::Message>* ProxyService::Stub::PrepareAsyncUnsetServerInfoRaw(::grpc::ClientContext* context, const ::multiple_rpc::Address& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::multiple_rpc::Message>::Create(channel_.get(), cq, rpcmethod_UnsetServerInfo_, context, request, false);
}

::grpc::ClientReader< ::multiple_rpc::Message>* ProxyService::Stub::SayHelloRaw(::grpc::ClientContext* context, const ::multiple_rpc::User& request) {
  return ::grpc::internal::ClientReaderFactory< ::multiple_rpc::Message>::Create(channel_.get(), rpcmethod_SayHello_, context, request);
}

::grpc::ClientAsyncReader< ::multiple_rpc::Message>* ProxyService::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::multiple_rpc::User& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::multiple_rpc::Message>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::multiple_rpc::Message>* ProxyService::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::multiple_rpc::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::multiple_rpc::Message>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, false, nullptr);
}

ProxyService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProxyService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ProxyService::Service, ::multiple_rpc::User, ::multiple_rpc::Address>(
          std::mem_fn(&ProxyService::Service::GetServerInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProxyService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProxyService::Service, ::multiple_rpc::Address, ::multiple_rpc::Message>(
          std::mem_fn(&ProxyService::Service::SetServerInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProxyService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProxyService::Service, ::multiple_rpc::Address, ::multiple_rpc::Message>(
          std::mem_fn(&ProxyService::Service::UnsetServerInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProxyService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ProxyService::Service, ::multiple_rpc::User, ::multiple_rpc::Message>(
          std::mem_fn(&ProxyService::Service::SayHello), this)));
}

ProxyService::Service::~Service() {
}

::grpc::Status ProxyService::Service::GetServerInfo(::grpc::ServerContext* context, const ::multiple_rpc::User* request, ::grpc::ServerWriter< ::multiple_rpc::Address>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProxyService::Service::SetServerInfo(::grpc::ServerContext* context, const ::multiple_rpc::Address* request, ::multiple_rpc::Message* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProxyService::Service::UnsetServerInfo(::grpc::ServerContext* context, const ::multiple_rpc::Address* request, ::multiple_rpc::Message* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProxyService::Service::SayHello(::grpc::ServerContext* context, const ::multiple_rpc::User* request, ::grpc::ServerWriter< ::multiple_rpc::Message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* GreetingService_method_names[] = {
  "/multiple_rpc.GreetingService/SayHello",
};

std::unique_ptr< GreetingService::Stub> GreetingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GreetingService::Stub> stub(new GreetingService::Stub(channel));
  return stub;
}

GreetingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SayHello_(GreetingService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GreetingService::Stub::SayHello(::grpc::ClientContext* context, const ::multiple_rpc::User& request, ::multiple_rpc::Message* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void GreetingService::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::multiple_rpc::User* request, ::multiple_rpc::Message* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::multiple_rpc::Message>* GreetingService::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::multiple_rpc::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::multiple_rpc::Message>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::multiple_rpc::Message>* GreetingService::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::multiple_rpc::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::multiple_rpc::Message>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, false);
}

GreetingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GreetingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GreetingService::Service, ::multiple_rpc::User, ::multiple_rpc::Message>(
          std::mem_fn(&GreetingService::Service::SayHello), this)));
}

GreetingService::Service::~Service() {
}

::grpc::Status GreetingService::Service::SayHello(::grpc::ServerContext* context, const ::multiple_rpc::User* request, ::multiple_rpc::Message* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace multiple_rpc

